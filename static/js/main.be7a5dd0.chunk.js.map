{"version":3,"sources":["components/Header/Header.js","components/Sort/Sort.js","components/Navbar/Navbar.js","components/Card/Card.js","components/Footer/Footer.js","utils/API.js","components/Grid/index.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Header","props","className","children","Sort","useState","id","offLabel","type","defaultChecked","onChange","onLabel","Navbar","handleInputChange","value","search","name","placeholder","Card","alt","src","image","firstName","lastName","fontSize","username","email","phone","country","Footer","axios","get","Container","fluid","Row","App","state","initialEmp","display","sort","checked","event","target","console","log","setState","prevState","length","data","filter","employee","first","last","toLowerCase","includes","sortAscending","sorted","concat","a","b","sortDescending","API","then","res","results","catch","err","this","searchEmp","map","picture","large","login","cell","location","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.be7a5dd0.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./header.css\"\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <>\r\n        <header className=\"header\">\r\n          {props.children}\r\n        </header>\r\n    </>\r\n  );\r\n}\r\nexport default Header;","import React, {useState} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Switch} from \"react-materialize\";\r\nfunction Sort(props) {\r\n  const [ checked, setChecked] = useState(true);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n        <div className=\"col s4\"></div>\r\n        <div className=\"col s5\"></div>\r\n        <div className=\"col s3\">\r\n        <Switch\r\n          id=\"sortSwitch\"\r\n          offLabel=\"A-Z\"\r\n          type=\"checkbox\"\r\n          defaultChecked={false}\r\n          onChange={props.onChange}\r\n          onLabel=\"Z-A\"\r\n        />\r\n            \r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// ReactDOM.render(\r\n//   <Sort />,\r\n//   document.getElementById('checkbox')\r\n// );\r\n\r\nexport default Sort;","import React from \"react\";\r\nimport \"./navbar.css\";\r\nimport Header from \"../Header/Header\";\r\nimport Sort from \"../Sort/Sort\";\r\n//import search from \"../SearchBar/SearchBar.js\"\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"navbar navbar-dark bg-dark\">\r\n      <Header>Employee Directory</Header>\r\n      {<form>\r\n        <div className=\"input-group search-bar\">\r\n          <input\r\n            onChange={props.handleInputChange}\r\n            value={props.search}\r\n            name=\"search\"\r\n            type=\"text\"\r\n            className=\"form-control coloring\"\r\n            placeholder=\"Search for an Employee\"\r\n            id=\"search\"\r\n          />   \r\n        </div>\r\n       \r\n      </form> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport EmailIcon from '@material-ui/icons/Mail';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport \"./card.css\";\n\nfunction Card(props) {\n  return (\n\n      <div className=\"col-3\">\n        <div className=\"card text-center\" key={props.id}>\n          <img \n              className=\"card-img-top images\" \n              alt=\"Profile\" \n              src={props.image} \n            />\n          <div className=\"card-body\"> \n            <h5 className=\"card-title font-bold text-md\">{props.firstName} {props.lastName}</h5>\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item col-sm-3\">\n                  <PersonIcon fontSize=\"large\" className=\"card__icon\"></PersonIcon>  {props.username}\n                </li>\n                <li className=\"list-group-item col-sm-3\">\n                  <EmailIcon fontSize=\"large\" className=\"card__icon\"></EmailIcon>  {props.email}\n                </li>\n                <li className=\"list-group-item col-sm-3\">\n                  <PhoneIcon fontSize=\"large\" className=\"card__icon\"></PhoneIcon>  {props.phone}\n                </li>\n                <li className=\"list-group-item col-sm-3\">\n                  <LanguageIcon fontSize=\"large\" className=\"card__icon\"></LanguageIcon>  {props.country}\n                </li>\n              </ul>\n            </div>\n        </div>\n      </div>\n        \n  );\n}\n\nexport default Card;\n","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nfunction Footer(){\r\n    return(\r\n        <>\r\n        <footer className=\"container-fluid\">\r\n            <p className=\"style\">Made by Crystal Han | 2020</p>\r\n        </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployee: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=gb\")\r\n  }\r\n};","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport const Container = ({ fluid, children }) => {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n};\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport const Row = ({ fluid, children }) => {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n};\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport const Col = ({ size, children }) => {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n};\n","import './App.css';\nimport React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Card from \"./components/Card/Card\";\nimport Footer from \"./components/Footer/Footer\";\nimport Sort from \"./components/Sort/Sort\";\nimport API from \"./utils/API\";\nimport {Container, Row} from \"./components/Grid/index\";\nclass App extends React.Component {\n  //set states\n  state={\n    initialEmp:[],\n    display:[],\n    search:\"\",\n    sort:\"\",\n    checked:false\n  }\n\n  //did components mount\n  componentDidMount(){\n    API.getEmployee()\n    .then(res=>\n      this.setState({\n        ...this.state,\n        initialEmp:res.data.results,\n        display:res.data.results\n      },console.log(res.data.results)))\n      .catch(err=>console.log(err));\n  }\n\n\n  handleInputChange=event=>{\n    const search = event.target.value;\n    console.log(search);\n    this.setState(prevState=>({\n      display:search.length >0 ? this.search(search, prevState.initialEmp)\n      : prevState.initialEmp\n    }))\n  }\n\n  search=(search,data) =>{\n    return data.filter(employee=>{\n      const firstName = employee.name.first;\n      const lastName=employee.name.last;\n      const fullName=firstName.toLowerCase() + \" \" + lastName.toLowerCase();\n      return fullName.includes(search.toLowerCase());\n    })\n  }\n\n//Stack overflow\n//   users.sort(function(a, b){\n//     if(a.firstname < b.firstname) { return -1; }\n//     if(a.firstname > b.firstname) { return 1; }\n//     return 0;\n// })\n  sortAscending=()=>{\n    console.log(\"clicked z-a\");\n    //the concat should make the json object of employees go into the array\n    const sorted=[].concat(this.state.initialEmp).sort((a,b)=> a.name.first < b.name.first ? 1 : -1);\n    return this.setState({\n      //this passes the state object itself\n      ...this.state,\n      display:sorted\n    })\n  }\n\n  sortDescending=()=>{\n    console.log(\"clicked a-z\");\n    //the concat should make the json object of employees go into the array\n    const sorted=[].concat(this.state.initialEmp).sort((a,b)=> a.name.first > b.name.first ? 1 : -1);\n    return this.setState({\n      //this passes the state object itself\n      ...this.state,\n      display:sorted\n    })\n  }\n  onChange = event=>{\n    const value = event.target.checked;\n    console.log(value);\n    if(value){\n      this.sortAscending();\n    }\n    else{\n      this.sortDescending();\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar\n          handleInputChange={this.handleInputChange}\n          searchEmp = {this.searchEmp}\n        />\n        <Sort\n            onChange={this.onChange}\n          />\n        <Container>\n          <Row>\n            {this.state.display.map(employee=>\n              <Card \n                image={employee.picture.large}\n                key={employee.id.name}\n                firstName={employee.name.first}\n                lastName={employee.name.last}\n                username={employee.login.username}\n                email={employee.email}\n                phone={employee.cell}\n                country={employee.location.country}\n              />\n            )}\n          </Row>\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}